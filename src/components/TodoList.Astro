---

---

<div class="containerFarme">
  <div class="toDoContainer">
    <div class="todoList">
      <h2>TO-DO</h2>

      <div class="activeListContainer">
        <ol class="activeList"></ol>
      </div>
      <div class="trashContainer">
        <input type="text" placeholder="Put task here" />

        <div class="trashTodo" id="div1">
          <svg width="39" height="48" viewBox="0 0 39 48" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1.7287 10.802H5.61759H36.7287" stroke="#666666" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path>
            <path
              d="M32.8397 10.8019V41.2268C32.8397 42.3795 32.43 43.485 31.7007 44.3002C30.9714 45.1153 29.9822 45.5732 28.9508 45.5732H9.5064C8.475 45.5732 7.48585 45.1153 6.75654 44.3002C6.02723 43.485 5.61751 42.3795 5.61751 41.2268V10.8019M11.4508 10.8019V6.45554C11.4508 5.3028 11.8606 4.19727 12.5899 3.38216C13.3192 2.56705 14.3083 2.10913 15.3397 2.10913H23.1175C24.1489 2.10913 25.1381 2.56705 25.8674 3.38216C26.5967 4.19727 27.0064 5.3028 27.0064 6.45554V10.8019"
              stroke="#666666"
              stroke-width="3"
              stroke-linecap="round"
              stroke-linejoin="round"></path>
            <path d="M15.34 21.668V34.7072" stroke="#666666" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path>
            <path d="M23.1178 21.668V34.7072" stroke="#666666" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"></path>
          </svg>
        </div>
      </div>
    </div>
    <div class="todoListDone">
      <h2>DONE</h2>
      <div class="doneListContainer">
        <ol class="doneList"></ol>
      </div>
      <div class="buttomContainer">
        <button class="deleteText">Clear all</button>
      </div>
    </div>
  </div>
</div>
<style>
  .containerFarme {
    display: grid;
    grid-column: content;
  }
  input::placeholder {
    color: var(--dm_todo_bg_color);
  }
  .trashContainer {
    display: flex;
    justify-content: space-between;
    height: auto;
    position: relative;

    gap: 1rem;
    align-items: end;
  }
  .trashTodo {
    width: 1rem;
    height: 3rem;
    & svg {
      width: 1rem;
    }
  }
  ol {
    display: flex;
    justify-content: space-between;
    flex-direction: column;
    gap: 0.3rem;
  }
  .activeListContainer {
    width: 100%;
    max-height: 24rem;
    overflow-x: hidden;
    overflow-y: auto;
    text-align: justify;
  }
  .doneListContainer {
    width: 100%;
    max-height: 24rem;
    overflow-x: hidden;
    overflow-y: auto;
    text-align: justify;
  }
  h2 {
    margin-bottom: 0.2rem;
  }

  input {
    background-color: var(--dm_notAtive_icon_color);
    border: none;
    border-radius: 8px;
    padding: 1rem 1.5rem;
    width: 100%;
    margin-top: 0.3rem;
  }
  h2,
  button,
  input {
    color: var(--dm_text_color);
  }
  .buttomContainer {
    display: flex;
    justify-content: end;
  }
  button {
    background-color: var(--dm_accent_color);
    border: none;
    padding: 0.2rem 1.2rem;
    border-radius: 8px;
    cursor: pointer;
    margin-top: 1rem;
  }
  button:hover {
    background-color: var(--dm_accent_second_color);
  }
  .toDoContainer {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
    background-color: var(--dm_div_color);
    padding: 1.5rem;
    border-radius: 8px;
  }
  .doneListContainer {
    min-height: 30rem;
  }
  .todoList,
  .todoListDone {
    background-color: var(--dm_todo_bg_color);
    padding: 1rem 2rem;
    border-radius: 8px;
    min-height: 30rem;
    min-width: 25rem;
  }

  .todoList {
    li:hover {
      text-decoration: line-through;
    }
  }
  .todoListDone {
    li {
      text-decoration: line-through;
    }
    li:hover {
      text-decoration: none;
    }
  }
</style>
<script>
  window.addEventListener("load", (event) => {
    console.log("page is fully loaded");
    if (todoStorage === null) {
      listValues = [];
    } else {
      listValues = JSON.parse(todoStorage);
      console.log("list", listValues);
    }
    if (assigmentDoneStorage === null) {
      listDone = [];
    } else {
      listDone = JSON.parse(assigmentDoneStorage);
    }
    listGenerator();
    listGeneratorDone();
  });

  let listValues = [];
  let listDone = [];
  const todoStorage = localStorage.getItem("todoStorage");
  const assigmentDoneStorage = localStorage.getItem("assigmentDoneStorage");
  const inputButton = document.querySelector(".addTaskButton");
  const deleteTextButton = document.querySelector(".deleteText");
  const checking = document.querySelector(".checkInput");
  const listDoneContainer = document.querySelector(".doneList");
  const inputOfValues = document.querySelector("input");

  document.getElementById("div1").addEventListener("dragover", allowDrop);

  document.getElementById("div1").addEventListener("drop", drop);

  let checkDone = "";

  inputOfValues.addEventListener("keypress", function (event) {
    if (event.key === "Enter") {
      event.preventDefault();
      inputVal();
      inputOfValues.value = "";
    }
  });

  function inputVal() {
    let inputText = inputOfValues.value;
    if (inputText !== "") {
      listValues.push(inputText);
      console.log(listValues);
      updateStrage();
      listGenerator();
    }
  }

  deleteTextButton.addEventListener("click", () => {
    listDone.splice(0);
    updateStrage();
    listGeneratorDone();
  });

  function listGenerator() {
    const listContainer = document.querySelector(".activeList");
    listContainer.innerHTML = ``;
    listValues.forEach((assigment, id) => {
      listContainer.innerHTML += `<li id="item${id}" draggable="true"  class="todo_assigment" data-id="${id}">  <label class="checkbox">${assigment} <input data-id="${id}" data-textContent="${assigment}" class="checkInput" type="checkbox" ${checkDone} /> <span class="check"></span> </label> </li>`;
    });

    document.querySelectorAll(".todo_assigment").forEach((each, id) => {
      each.addEventListener("dblclick", removeAssigment);
    });

    document.querySelectorAll(".checkInput").forEach((each, id) => {
      each.addEventListener("click", checkingTrue);
    });
    document.querySelectorAll("li").forEach((each, id) => {
      each.addEventListener("dragstart", drag);
    });
  }
  function checkingTrue(event) {
    console.log("virker det?", event.target.dataset);

    let listItemNumbers = event.target.dataset.id;
    let listItemValue = event.target.dataset.textcontent;

    listDone.push(listItemValue);
    listValues.splice(listItemNumbers, 1);
    console.log("list Done", listDone);
    console.log("list Item Number", listItemNumbers);
    console.log("list item value", listItemValue);
    listGenerator();
    listGeneratorDone();
    updateStrage();
  }

  function listGeneratorDone() {
    listDoneContainer.innerHTML = ``;
    listDone.forEach((assigment, id) => {
      listDoneContainer.innerHTML += `<li class="todo_assigmentDone" data-id="${id}">  <label class="checkbox">${assigment}  <input data-id="${id}" data-textContent="${assigment}" class="checkInputDone" type="checkbox" checked ${checkDone} /> <span class="check"></span> </label> </li>`;
    });

    document.querySelectorAll(".todo_assigmentDone").forEach((each, id) => {
      each.addEventListener("dblclick", addAssigmentDone);
    });
    document.querySelectorAll(".checkInputDone").forEach((each, id) => {
      each.addEventListener("click", checkingFalse);
    });

    // const returnButton = document.querySelector(".returnBut");
    // returnButton.addEventListener("click", (event) => {
    //   addAssigmentDone(event);
    //   console.log("return that thing", event);
    // });
  }
  function checkingFalse(event) {
    console.log("1 gang");
    let listItemNumbers = event.target.dataset.id;
    let listItemValue = event.target.dataset.textcontent;

    listValues.push(listItemValue);
    listDone.splice(listItemNumbers, 1);

    listGenerator();
    listGeneratorDone();
    updateStrage();
  }

  function updateStrage() {
    localStorage.setItem("todoStorage", JSON.stringify(listValues));
    localStorage.setItem("assigmentDoneStorage", JSON.stringify(listDone));
  }

  function removeAssigment(event) {
    console.log("event check", event);
    let listItemNumbers = event.target.dataset.id;
    let listItemValue = event.target.textContent;

    listDone.push(listItemValue);
    listValues.splice(listItemNumbers, 1);
    console.log("list Done", listDone);
    console.log("list Item Number", listItemNumbers);
    console.log("list item value", listItemValue);
    listGenerator();
    listGeneratorDone();
    updateStrage();
  }
  function addAssigmentDone(event) {
    console.log("event check done", event);
    let listItemNumbers = event.target.dataset.id;
    let listItemValue = event.target.textContent;
    listValues.push(listItemValue);
    listDone.splice(listItemNumbers, 1);
    console.log("list Done", listDone);

    listGenerator();
    listGeneratorDone();
    updateStrage();
  }

  // test
  // Drag & Drop Functions
  function allowDrop(event) {
    event.preventDefault(); // Allows dropping
    console.log("allowDrop event:", event);
  }

  let dragNumber;
  function drag(event) {
    event.dataTransfer.setData("text", event.target.dataset.id);
    dragNumber = event.target.dataset.id;
    console.log("drag event:", dragNumber);
  }

  function drop(event) {
    console.log("drop", event);
    event.preventDefault();
    let workPls = document.querySelector("li");
    console.log("Its alive", workPls);
    trash(dragNumber);

    console.log("virk nu", event);
  }

  function trash(event) {
    console.log("event check", event);
    let listItemNumbers = event;
    listValues.splice(listItemNumbers, 1);
    console.log("list Done", listDone);

    listGenerator();
    listGeneratorDone();
    updateStrage();
  }
</script>
